scilla-version 0

import BoolUtils

library Crowdfunding

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let check_update = 
  fun (bs : Map ByStr20 Uint128) =>
  fun (sender : ByStr20) =>
  fun (amount : Uint128) =>
    let c = builtin contains bs sender in
    (match c with 
    | false => 
      let bs1 = builtin put bs sender amount in
      Some {Map ByStr20 Uint128} bs1
    | true  => None {Map ByStr20 Uint128}
    end)
   

let blk_leq =
  fun (blk1 : BNum) =>
  fun (blk2 : BNum) =>
    let bc1 = builtin blt blk1 blk2 in 
    let bc2 = builtin eq blk1 blk2 in 
    orb bc1 bc2  

let accepted_code = Int32 1
let missed_deadline_code = Int32 2
let already_backed_code  = Int32 3
let not_owner_code  = Int32 4
let too_early_code  = Int32 5
let got_funds_code  = Int32 6
let cannot_get_funds  = Int32 7
let cannot_reclaim_code = Int32 8
let reclaimed_code = Int32 9

contract Crowdfunding

(owner     : ByStr20,
 max_block : BNum,
 goal      : Uint128)

field backers : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field funded : Bool = false

transition Donate (lpv)
  blk <-&BLOCKNUMBER ;
  in_time = {blk_leq blk max_block} ;
  (match in_time with 
  | true  => 
    bs  <- backers ;
    res = {check_update bs _sender _amount} ;
    (match res with
    | None => 
      msg  = {-tag: "" ; -recipient: _sender ; -amount: Uint128 0 ; 
              code : already_backed_code} ;
      msgs = {one_msg msg} ;
      send msgs  
    | Some bs1 =>
      backers := bs1 ;
      accept ;
      msg  = {-tag: "" ; -recipient: _sender ; -amount: Uint128 0 ; 
              code : accepted_code} ;
      msgs = {one_msg msg} ;
      e = { -eventname: "DonationAccepted" ; donor : _sender ; amount : _amount } ;
      event e ;
      send msgs 
    end)  

  | false => 
    msg  = {-tag: "" ; -recipient: _sender ; -amount: Uint128 0 ; 
            code : missed_deadline_code} ;
    msgs = {one_msg msg} ;
    send msgs
  end) 
 
end

transition GetFunds (lpv)
  is_owner = builtin eq owner _sender ;
  (match is_owner with
  | false => 
    msg  = {-tag: "" ; -recipient: _sender ; -amount: Uint128 0 ;
            code : not_owner_code} ;
    msgs = {one_msg msg} ;
    send msgs
  | true => 
    blk <-&BLOCKNUMBER ;
    in_time = {blk_leq blk max_block} ;
    c1 = (negb in_time) ;
    bal <- _balance ;
    c2 = builtin lt bal goal ;
    c3 = (negb c2) ;
    c4 = andb c1 c3 ;
    (match c4 with 
    | false =>  
      msg  = {-tag: "" ; -recipient: _sender ; -amount: Uint128 0 ;
              code : cannot_get_funds} ;
      msgs = {one_msg msg} ;
      send msgs
    | true =>   
      tt = true ;
      funded := tt ;
      msg  = {-tag: "" ; -recipient: owner ; -amount: bal ; 
              code : got_funds_code} ;
      msgs = {one_msg msg} ;
      send msgs
    end)
  end)
  
end

transition ClaimBack (lpv)
  blk <-&BLOCKNUMBER ;
  after_deadline = builtin blt max_block blk ;
  (match after_deadline with
  | false =>
    msg  = {-tag: "" ; -recipient: _sender ; -amount: Uint128 0 ;
            code : too_early_code} ;
    msgs = {one_msg msg} ;
    send msgs
  | true =>
    bs <- backers ;
    bal <- _balance ;
    f <- funded ;
    c1 = builtin lt bal goal ;
    c2 = builtin contains bs _sender ;  
    c3 = (negb f) ;
    c4 = andb c1 c2 ;
    c5 = andb c3 c4 ;
    (match c5 with
    | false =>
      msg  = {-tag: "" ; -recipient: _sender ; -amount: Uint128 0 ;
              code : cannot_reclaim_code} ;
      msgs = {one_msg msg} ;
      send msgs
    | true =>
      res = builtin get bs _sender ;
      (match res with
      | None =>
        msg  = {-tag: "" ; -recipient: _sender ; -amount: Uint128 0 ;
                code : cannot_reclaim_code} ;
        msgs = {one_msg msg} ;
        send msgs
      | Some v =>
        bs1 = builtin remove bs _sender ;
        backers := bs1 ;
        msg  = {-tag: "" ; -recipient: _sender ; -amount: v ; 
                code : reclaimed_code} ;
        msgs = {one_msg msg} ;
        e = { -eventname: "ClaimedBack" ; claimed_by : _sender ; amount : v } ;
        event e ;
        send msgs
     
      end)
    end)
   
  end) 
end