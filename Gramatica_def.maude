fmod GRAMMAR is
  pr STRING .
  pr INT .
  sorts @Token@ @Bubble@ @NeTokenList@ .
  sort @DeclaracionOp@ @Prog@ @TipoEntero@ @Num@ @Entero@ @TipoOpto@ @BNum@ @NombreTipo@ @Option@ @Lista@ @Par@ @Natural@ @Contrato@ .
  ***subsort @DeclaracionOp@ @Entero@ String @BNum@ @Option@ @Lista@ @Par@ @Natural@ @ParametrosInm@ @Campo_mod@ @Version@ < @Prog@ .

  ***DATOS PRMITIVOS

  ***ENTEROS
  ***Declaración de entero (Nombre de su tipo y el valor), los uint los trato como naturales.
  ops Uint32 Uint64 Uint128 Uint256 Int32 Int64 Int128 Int256 : -> @TipoEntero@ [ctor] .
  op __ : @TipoEntero@ Int -> @Entero@ [ctor prec 11] .
  ***op __ : @TipoEnteroInt@ Num -> @EnteroInt@ [ctor] . 

  ***Declaración de la operacion de igualdad.
  op eq__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor comm prec 13] .
  ***Declaración de la operación Suma.
  op add__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor comm prec 13] .
  ***Declaración de la operación resta
  op sub__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 14] .
  ***Declaración de la operación de multiplicación.
  op mul__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor comm prec 14] .
  ***Declaración de la operación de división.
  op div__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 14] .
  ***Declaración de la operación resto.
  op rem__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 14] .
  ***Declaración de la operación menor
  op lt__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 13] .
  ***Declaración de la operación de exponente.
  op pow__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 14] .
  ***Declaración de la operación de raíz cuadrada.
  op isqrt_ : @Token@ -> @DeclaracionOp@ [ctor prec 14] .
  ***Declaración de la operación to_nat.
  op to-nat_ : @Token@ -> @DeclaracionOp@ [ctor prec 14] .
  ***Declaración de la operación to_(u)int32/64/128/256.
  ops to-int32 to-int64 to-int128 to-int256 to-uint32 to-uint64 to-uint128 to-uint256 : -> @TipoOpto@ [ctor] .
  op __ : @TipoOpto@ @Token@ -> @DeclaracionOp@ [ctor prec 14] . 

  ***STRINGS
  ***La operación eq ya está definida anteriormente para los enteros y como es la misma es la que usaremos.
  ***Declaración de la operacion de concatenar dos strings.
  op concat__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor comm prec 14] .
  ***Declaración de la operación de substring (string posición_inicio longitud_substring).
  op substr___ : @Token@ @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 14] .
  ***op substr___ : @Token@ Nat Nat -> @DeclaracionOp@ [ctor] .
  ***Declaración de la operacion to-string que convierte un elemento de tipo Intx/Uintx/BystrX/ByStr a string.
  op to-string_ : @Token@ -> @DeclaracionOp@ [ctor prec 14] .
  ***Declaración de la operacion strlen (devuelve la longitud del string).
  op strlen_ : @Token@ -> @DeclaracionOp@ [ctor prec 14] .

  ***HASHES
  op sha256hash_ : @Token@ -> @DeclaracionOp@ [ctor prec 14] .
  op schnorr-verify___ : @Token@ @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 14] . 
  op ecdsa-verify___ : @Token@ @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 14] .

  ***MAPAS
  sort @TipoClave@ @TipoValor@ @MapVacio@ @Map@ @DeclaracionOpMapI@ @posicion@ @ListaPosiciones@ .
  ***subsort @TipoEntero@ < @NombreTipo@ .
  subsort @NombreTipo@ < @TipoClave@ .
  subsort @NombreTipo@ @Par@  < @TipoValor@ .
  subsort @posicion@ < @ListaPosiciones@ .

  op Emp__ : @TipoClave@ @TipoValor@ -> @MapVacio@ [ctor prec 15] .
  op Emp__ : @TipoClave@ @Bubble@ -> @MapVacio@ [ctor prec 15] .
  op Map__ : @TipoClave@ @TipoValor@ -> @Map@ [ctor prec 15] .
  op Map__ : @TipoClave@ @Bubble@ -> @Map@ [ctor prec 15] .
  op [_] : @Token@ -> @posicion@ [ctor prec 18] .
  op __ : @ListaPosiciones@ @ListaPosiciones@ -> @ListaPosiciones@ [ctor assoc prec 19] .
  ***Definición operación insertar.
---   ***Funcional
  op put___ : @Token@ @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 19] .
  ***In-place.
  op __:=_ : @Token@ @ListaPosiciones@ @Token@ -> @DeclaracionOpMapI@ [ctor prec 19] .
  ***Definición operación obtener valor.
  ***Funcional
  op get__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 13] .
  ***In-place
  op _<-__ : @Token@ @Token@ @ListaPosiciones@ -> @DeclaracionOpMapI@ [ctor prec 19] .
  ***Definición operación contener.
  ***Funcional
  op contains__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 13] .
  ***In-place
  op _<-exists__ : @Token@ @Token@ @ListaPosiciones@ -> @DeclaracionOpMapI@ [ctor prec 19] .
  ***Definición operación eliminar.
  ***Funcional
  op remove__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 13] .
  ***In-place
  op delete__ : @Token@ @ListaPosiciones@ -> @DeclaracionOpMapI@ [ctor prec 19] .

  ***BNUM
  ***Definición número de bloques
  op BNum_ : Int -> @BNum@ [ctor] .
  ***Definción de operaciones
  ***La operación eq ya está definida para los enteros.
  ***Definición operación blt(menor o igual).
  op blt__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 14] .
  ***Declaración operación badd (suma un Bnum con un UintX).
  op badd__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 14] .
  ***Declaración operación bsub(resta de dos Bnums).
  op bsub__ : @Token@ @Token@ -> @DeclaracionOp@ [ctor prec 14] .

  ***Falta por meter los mapas, hashes y direcciones.

  ***DATOS ALGEBRAICOS
  ***Declaración option
  subsort @TipoEntero@ @Map@ < @NombreTipo@ .
  ops String ByStr32 ByStr33 ByStr20 BNum Bool Message Error ByStr ByStr64 Unit : -> @NombreTipo@ [ctor] .  ***Falta meter los enteros
  op Option_ : @NombreTipo@ -> @Option@ [ctor prec 13] .  ***A lo mejor hay que hacer un tipo declaracionOption para diferenciarlo.
  ***Constructoras option
  op None{_} : @NombreTipo@ -> @Option@ [ctor prec 13] .
  op None : -> @Option@ [ctor] .
  op Some{_}_ : @NombreTipo@ @Token@ -> @Option@ [ctor prec 13] . 
  op Some_ : @Token@ -> @Option@ [ctor prec 13] .

  ***Declaración Lista
  op List_ : @NombreTipo@ -> @Lista@ [ctor prec 13] .
  ***Constructoras de las listas
  op Nil{_} : @NombreTipo@ -> @Lista@ [ctor prec 13] .
  op Cons{_}__ : @NombreTipo@ @Token@ @Token@ -> @Lista@ [ctor prec 13] .

  ***Declaración Pares
  op Pair__ : @NombreTipo@ @NombreTipo@ -> @Par@ [ctor prec 13] .
  ***Constructora Pair
  op Pair{__}__ : @NombreTipo@ @NombreTipo@ @Token@ @Token@ -> @Par@ [ctor prec 13] .

  ***Declaración Nat
  op Nat : -> @Natural@ [ctor] .
  ***Constructoras de Nat
  op Zero : -> @Natural@ [ctor] .
  op Succ_ : @Token@ -> @Natural@ [ctor prec 13] .

  ***PARÁMETROS INMUTABLES
  sort @TipoParamInm@ @ParamInm@ @ListaParamInm@ @ParametrosInm@ .
  subsort @NombreTipo@ @Map@ @Option@ < @TipoParamInm@ .
  subsort @ParamInm@ < @ListaParamInm@ .

  ***ops ByStr20 BNum String ByStr32 Bool Message : -> @TipoParamInm@ [ctor] .
  ***op _:_ : String TipoParamInm -> ParamInmSolo [ctor] .
  op _:_ : @Token@ @TipoParamInm@ -> @ParamInm@ [ctor prec 15] .
  op _:_ : @Token@ @Bubble@ -> @ParamInm@ [ctor prec 15] .
  ***op vacio : -> ListaParamInm [ctor] .
  ***op _ : ParamInm -> ListaParamInm [ctor] .
  op lpv : -> @ListaParamInm@ [ctor] .
  op (_,_) : @ListaParamInm@ @ListaParamInm@ -> @ListaParamInm@ [ctor assoc prec 17] . 
  ***op <> : -> ParametrosInm [ctor] .
  ***op _ : @ListaParamInm@ -> @ParametrosInm@ [ctor] .
  --- ***op [_with_=>] : ParametrosInm OperacionBooleana -> Restriccion [ctor] .

  ***CAMPOS MODIFICABLES
  sort @ValorCampo@ @Campo_mod@ @ListaCamposMod@ .
  ***subsort @Entero@ @Option@ @Lista@ @Par@ @Natural@ String Bool < @ValorCampo@ .
  subsort @Entero@ @Option@ @Lista@ @Par@ @Natural@ @MapVacio@ Bool @Expresion@ < @ValorCampo@ .
  ***subsort Bool < @ValorCampo@ .
  subsort @Campo_mod@ < @ListaCamposMod@ .
  op cv : -> @Campo_mod@ [ctor] .
  op field_=_ : @ParamInm@ @ValorCampo@ -> @Campo_mod@ [ctor prec 19] .
  op field_=_ : @ParamInm@ @Bubble@ -> @Campo_mod@ [ctor prec 19] .
  op __ : @ListaCamposMod@ @ListaCamposMod@ -> @ListaCamposMod@ [ctor assoc prec 20] .

  ***EXPRESIONES
  sort @TipoDato@ @Expresion@ @Operacion@ @ExpresionFuncion@ @ListaArgumentos@ @OperacionBuilt@ @ListaExpresiones@ @TipoOpcion@ @Opcion@
       @ListaOpciones@ @Expresiones@ @ExpresionMatch@ @ListaArg@ @ExpresionLet@ @ExpresionAplicarF@ .
  --- ***Entero String Bool ExpresionBuilt Map ByStr32 ByStr20 BNum Option Lista Par Natural Expresion
  subsort @Entero@ String @BNum@ @Option@ @Lista@ @Par@ @Natural@ @ExpresionFuncion@ @Expresion@ @ExpresionMatch@ @MapVacio@ < @TipoDato@ .
  --- --- subsort Expresion DeclaracionOpBools DeclaracionOpInts < Operacion .
  subsort @Expresion@ @Lista@ @ExpresionFuncion@ @ExpresionMatch@ @Excepcion@ @Par@ < @Operacion@ .
  subsort @TipoEntero@ @NombreTipo@ @Par@ < @ListaArgumentos@ .
  subsort @DeclaracionOp@ @DeclaracionOpBools@  < @OperacionBuilt@ .
  subsort @ExpresionLet@ @ADTS@ < @ListaExpresiones@ . 
 *** subsort @Declaracion@ @ExpresionMatch@ < @Expresiones@ .
  subsort @ListaDeclaraciones@ @Entero@ @Expresion@ < @Expresiones@ .
  subsort @Option@ @Par@ Bool < @TipoOpcion@ .
  subsort @Opcion@ < @ListaOpciones@ .
  subsort @Token@ < @ListaArg@ .

  op let_=_ : @Token@ @TipoDato@ -> @ExpresionLet@ [ctor prec 20]  .
  op let_=_ : @Token@ @Bubble@ -> @ExpresionLet@ [ctor prec 20]  .
  op let_=_in_ : @Token@ @TipoDato@ @Operacion@ -> @Expresion@ [ctor prec 20] .
  ***op let_ : @Expresion@ -> @Expresion@ [ctor prec 20] .
  ***op let_in_ : @Expresion@ @Operacion@ -> @Expresion@ [ctor prec 20] .
  --- ***Falta añadir los mensajes
  op fun(_)=>_ : @ParamInm@ @Operacion@ -> @ExpresionFuncion@ [ctor prec 20] .
  ***op __ : @ListaArg@ @ListaArg@ -> @ListaArg@ [ctor assoc prec 19] .
  op _=_ :  @Token@ @Bubble@ -> @Expresion@ [ctor prec 19] .
  ***op _=__ : @Token@ @Token@ @NeTokenList@ -> @Expresion@ [ctor prec 20] .
  --- --- op tfun'_=>_ : String Operacion -> Expresion [ctor] .
  ***op String : -> @ListaArgumentos@ [ctor] .
  op __ : @ListaArgumentos@ @ListaArgumentos@ -> @ListaArgumentos@ [ctor assoc prec 19] .
  op @__ : @Token@ @ListaArgumentos@ -> @Expresion@ [ctor prec 20] .  

  --- --- op [_] : String -> Argumento [ctor] .
  --- --- op __ : ListaArgumentos ListaArgumentos -> ListaArgumentos [ctor] .
  --- --- ***op builtin__ : OperacionBuilt ListaArgumentos -> ExpresionBuilt [ctor] . ***No es exactamente string (hay que cambiarlo).
  op builtin_ : @OperacionBuilt@ -> @Expresion@ [ctor prec 19] .

  op ev : -> @Expresiones@ [ctor] .
  op |_=>_ : @TipoOpcion@ @Expresiones@ -> @Opcion@ [ctor prec 20] .  ***La segunda entrada no sería un string sino un statement.
  ***op _=>_ : @Constructora@ @Expresiones@ -> @Opcion@ [ctor prec 20] .
  op |_=>_ : @Bubble@ @Expresiones@ -> @Opcion@ [ctor prec 20] .
  op |_=>_ : @TipoOpcion@ @Bubble@ -> @Opcion@ [ctor prec 20] .
  op ov : -> @ListaOpciones@ [ctor] .
  op __ : @ListaOpciones@ @ListaOpciones@ -> @ListaOpciones@ [ctor assoc prec 21] .
  op match_with_end : @Token@ @ListaOpciones@ -> @ExpresionMatch@ [ctor prec 21] .
  op __ : @ListaExpresiones@ @ListaExpresiones@ -> @ListaExpresiones@ [ctor assoc prec 22] .

  ***DECLARACIONES
  sort @Declaracion@ @Valor@ @ListaDeclaraciones@ .
  ***@Entero@ String DeclaracionFuncion EventoMsg ExpresionBuilt Option Lista Par Natural DeclaracionOpBools DeclaracionOpInts
  subsorts @Entero@ String @Option@ @Lista@ @Par@ @Natural@ @Evento@ @Expresion@ @Mensaje@ Bool @DeclaracionOpBools@ @ExpresionMatch@ < @Valor@ .
  subsort @Declaracion@ @ExpresionMatch@ @DeclaracionOpMapI@ @Expresion@ @Error@ < @ListaDeclaraciones@ .
  ***subsort @Expresiones@ @DeclaracionOpMapI@ @Expresion@ < @ListaDeclaraciones@ .

  op _<-_ : @Token@ @Token@  -> @Declaracion@ [ctor prec 19] .
  op _:=_ : @Token@ @Token@ -> @Declaracion@ [ctor prec 19] .
  op _<-&BLOCKNUMBER : @Token@ -> @Declaracion@ [ctor prec 19] .
  op _=_ : @Token@ @Valor@ -> @Declaracion@ [ctor prec 19] .
  ***op __ : @Token@ @ListaArgumentos@ -> @Declaracion@ [ctor] .
  op forall__ : @Token@ @Token@ -> @Declaracion@ [ctor prec 19] .
  op accept : -> @Declaracion@ [ctor] .
  op send_ : @Token@ -> @Declaracion@ [ctor prec 19] .
  op event_ : @Token@ -> @Declaracion@ [ctor prec 19] .

  op _;_ : @ListaDeclaraciones@ @ListaDeclaraciones@ -> @ListaDeclaraciones@ [ctor assoc prec 20] .

  ***TRANSICIONES Y PROCEDIMIENTOS
  sort @Transicion@ @ListaTransiciones@ @Procedimiento@ .
  subsort @Transicion@ @Procedimiento@ < @ListaTransiciones@ .

  op procedure_(_)_end : @Token@ @ListaParamInm@ @ListaDeclaraciones@ -> @Procedimiento@ [ctor prec 23] .
  op transition_(_)_end : @Token@ @ListaParamInm@ @ListaDeclaraciones@ -> @Transicion@ [ctor prec 23] .
  op tv : -> @ListaTransiciones@ [ctor] .
  op __ : @ListaTransiciones@ @ListaTransiciones@ -> @ListaTransiciones@ [ctor assoc prec 24] .

  ***COMUNICACIONES
  sort @NombreEvento@ @ListaCamposEvento@ @Evento@ @CampoEvento@ @TagMensaje@ @EnvioMensaje@ @CantidadMensaje@ @Mensaje@ @NombreExcepcion@ @Excepcion@ .
  subsort @CampoEvento@ < @ListaCamposEvento@ .
  ***Eventos
  op -eventname:_ : String -> @NombreEvento@ [ctor prec 12] .
  op _:_ : @Token@ @Token@ -> @CampoEvento@ [ctor prec 12] .
  ***op _:_ : @Token@ String -> @CampoEvento@ [ctor prec 12] .
  op lcv : -> @ListaCamposEvento@ [ctor] .
  op _;_ : @ListaCamposEvento@ @ListaCamposEvento@ -> @ListaCamposEvento@ [ctor assoc prec 13] .
  op {_;_} : @NombreEvento@ @ListaCamposEvento@ -> @Evento@ [ctor prec 14] .
  ***Mensajes
  op -tag:_ : String -> @TagMensaje@ [ctor prec 12] .
  op -recipient:_ : @Token@ -> @EnvioMensaje@ [ctor prec 12] .
  op -amount:_ : @Entero@ -> @CantidadMensaje@ [ctor prec 12] .
  op -amount:_ : @Token@ -> @CantidadMensaje@ [ctor prec 12] .
  ***op {_;_;_;_} : @TagMensaje@ @EnvioMensaje@ @CantidadMensaje@ @ListaCamposEvento@ -> @Mensaje@ [ctor prec 14] .
  op {_;_;_;_} : @TagMensaje@ @EnvioMensaje@ @CantidadMensaje@ @ListaCamposEvento@ -> @Mensaje@ [ctor prec 14] .

  op -exception:_ : String -> @NombreExcepcion@ [ctor prec 12] .
  op {_;_} : @NombreExcepcion@ @ListaCamposEvento@ -> @Excepcion@ [ctor prec 14] .

  ***LIBRERIA BOOLUTILS
  sort @DeclaracionOpBools@ .

  ops andb__ orb__ : @Token@ @Token@ -> @DeclaracionOpBools@ [ctor prec 14] .
  ops negb_ bool-to-string_ : @Token@ -> @DeclaracionOpBools@ [ctor prec 14] .
  ops _.andb__ _.orb__ : @Token@ @Token@ @Token@ -> @DeclaracionOpBools@ [ctor prec 14] .
  ops _.negb_ _.bool-to-string_ : @Token@ @Token@ -> @DeclaracionOpBools@ [ctor prec 14] .



  ***ADTS
  sort @ADTS@ @Constructora@ @Constructoras@ .
  subsort @Constructora@ < @Constructoras@ .
  op |_ : @Token@ -> @Constructora@ [ctor prec 15] .
  --- ops String ByStr32 ByStr20 BNum Bool : -> ListaArgumentos [ctor] .
  --- op __ : ListaArgumentos ListaArgumentos -> ListaArgumentos [ctor assoc] .
  --- op |_of_ : Qid ListaArgumentos -> Constructora [ctor] . 
  op __ : @Constructoras@ @Constructoras@ -> @Constructoras@ [ctor assoc prec 16] .
  op type_=_ : @Token@ @Constructoras@ -> @ADTS@ [ctor prec 17] .

  ***ERRORES
  sort @Error@ .
  op throw : -> @Error@ [ctor] .
  op throw_ : @Token@ -> @Error@ [ctor prec 19] .

  

  sort @NombreLibreria@ @NombreContrato@ @Libreria@ @LibImportar@ @Importacion@ @ListaImportar@ .
  subsort @LibImportar@ < @ListaImportar@ .

  op library_ : @Token@ -> @NombreLibreria@ [ctor] .
  op contract_ : @Token@ -> @NombreContrato@ [ctor] .
  ops BoolUtils IntUtils PairUtils ListUtils : -> @LibImportar@ [ctor] .
  op iv : -> @Importacion@ [ctor] .
  op __ : @ListaImportar@ @ListaImportar@ -> @ListaImportar@ [ctor assoc] .
  op import_ : @ListaImportar@ -> @Importacion@ [ctor] .
  op import_as_ : @LibImportar@ @Token@ -> @Importacion@ [ctor] .

  op __ : @NombreLibreria@ @ListaExpresiones@ -> @Libreria@ [ctor] .

 


 


  
  op scilla-version_______ : Nat @Importacion@ @Libreria@ @NombreContrato@ @ListaParamInm@ @ListaCamposMod@ @ListaTransiciones@ -> @Contrato@ [ctor] .
  ***op scilla-version___ : Nat @Importacion@ @Libreria@ -> @Contrato@ [ctor] .

endfm


fmod datos_primitivos is 
  pr INT .
  pr STRING .
  pr QID .
  ***pr NAT .
  pr CONVERSION .

  sort EnteroUint EnteroInt Entero TipoEntero TipoEnteroUint TipoEnteroInt TipoOpToNat TipoOpto ByStr32 Tipo_to_string Byte Bytes TipoHash DeclaracionOp
       TipoClave TipoValor Map MapVacio ByStr20 BNum DeclaracionOpMapI Prog Num .
  **** TipoClaveF TipoValorF DeclaracionOp Tipo_to_string Pareja Map1 Map2 Cadena .
  ***TipoClave comprende los siguientes tipos.
  ***subsort String Int ByStr32 BNum < TipoClaveF .
  --- ***Todos los tipos excepto una función (añadir más)
  --- subsort String Int ByStr32 BNum < TipoValorF .
  --- subsort EnteroUint EnteroInt < Entero .
  --- subsorts TipoEnteroUint TipoEnteroInt < TipoEntero .
  --- subsorts Nat Byte < Bytes .
  --- subsort TipoEntero < TipoClave .
  --- ***Puede ser cualquier tipo definido tambien por el usuario (mapas o datos alegbraicos)
  --- subsorts TipoEntero Map < TipoValor .
  --- subsort DeclaracionOp EnteroUint < Prog .

  ***Acepta tambien cualquier bystrX 
---   ops String ByStr32 ByStr BNum : -> TipoClave [ctor] .
---   ops String ByStr32 ByStr BNum : -> TipoValor [ctor] .


  ***Declaración de los distintos tipos que puede ser un entero 
  ***ops Uint32 Uint64 Uint128 Uint256 Int32 Int64 Int128 Int256 : -> TipoEntero [ctor] .

  ***Declaración de entero (Nombre de su tipo y el valor), los uint los trato como naturales.
  ***op _ : Qid -> EnteroUint [ctor] .
  op Entero__ : TipoEnteroInt Int -> Entero [ctor] . 


  ***Declaración de operaciones de los enteros (las entradas son strings porque se usa el nombre para hacer referencia al entero).
  ***Declaración de la operacion de igualdad.
  ***op eq__ : String String -> DeclaracionOp [ctor comm] .
  ***Declaración de la operación Suma.
---   op add__ : String String -> DeclaracionOp [ctor comm] .
---   ***Declaración de la operación resta
---   op sub__ : String String -> DeclaracionOp [ctor] .

---   ***Declaración de la operación de multiplicación.
---   op mul__ : String String -> DeclaracionOp [ctor comm] .

---   ***Declaración de la operación de división.
---   op div__ : String String -> DeclaracionOp [ctor] .

---   ***Declaración de la operación resto.
---   op rem__ : String String -> DeclaracionOp [ctor] .

---   ***Declaración de la operación menor
---   op lt__ : String String -> DeclaracionOp [ctor] .

---   ***Declaración de la operación de exponente.
  ***op pow__ : Qid Qid -> DeclaracionOp [ctor] .

  ***Declaración de la operación de raíz cuadrada.
  op raiz_ : Qid -> DeclaracionOp [ctor] .
  --- op raiz1__ : Nat Nat -> Nat [ctor] .
  --- ceq raiz1 n2 n3 = n3
  ---     if n3 * n3 == n2 .
  --- ceq raiz1 n2 n3 = n3 
  ---     if n3 * n3 < n2 /\ (n3 + 1) * (n3 + 1) > n2 .
  --- ceq raiz1 n2 n3 = raiz1 n2 sd(n3,1)
  ---     if n3 * n3 > n2 .
  --- op raiz_ : Nat -> Nat [ctor] .
  --- eq raiz n2 = raiz1 n2 n2 .

  ***Declaración de la operación to_nat.
  op to-nat_ : Qid -> DeclaracionOp [ctor] .

  ***Declaración de la operación to_(u)int32/64/128/256.
  ops to-int32 to-int64 to-int128 to-int256 to-uint32 to-uint64 to-uint128 to-uint256 : -> TipoOpto [ctor] .
  op __ : TipoOpto Qid -> DeclaracionOp [ctor] . 
  
  ***Los strings ya están definidos por defecto.
  ***Operaciones para los strings.
  ***La operación eq ya está definida anteriormente para los enteros y como es la misma es la que usaremos.
  ***Declaración de la operacion de concatenar dos strings.
---   op concat__ : String String -> DeclaracionOp [ctor comm] .
---   ***Declaración de la operación de substring (string posición_inicio longitud_substring).
  ***op subCadena___ : Qid Qid Qid -> DeclaracionOp [ctor] .
---   op substr___ : String Nat Nat -> DeclaracionOp [ctor] .
---   ***Declaración de la operacion to-string que convierte un elemento de tipo Intx/Uintx/BystrX/ByStr a string.
  op to-string_ : Qid -> DeclaracionOp [ctor] .
---   ***Declaración de la operacion strlen (devuelve la longitud del string).
---   op strlen_ : String -> DeclaracionOp [ctor] .


---   ***Definición Hash
---   ops a b c d e f : -> Byte [ctor] .
---   op __ : Bytes Bytes -> Bytes [ctor assoc] .
---   op [0x_] : Bytes -> ByStr32 [ctor] .
---   ***Definición de operación eq (usaremos la definida para enteros).
---   ***Definición operación sha256hash.
---   op sha256hash_ : String -> DeclaracionOp [ctor] .
---   ***Definición operación keccak256hash.
---   op keccak256hash_ : String -> DeclaracionOp [ctor] .
---   ***Definición operación ripemd160hash.
---   op ripemd160hash_ : String -> DeclaracionOp [ctor] .
---   ***Definición operación to_bystr (convierte un hash en un tipo ByStr).
---   op to-bystr : String -> DeclaracionOp [ctor] .
---   ***Definición operación substr (extrae una subcadena del hash).
---   op substr___ : String String String -> DeclaracionOp [ctor] .
---   op substr___ : String Nat Nat -> DeclaracionOp [ctor] .
---   ***Definición operación strrev (da la vuelta a los bytes).
---   op strrev_ : String -> DeclaracionOp [ctor] .
---   ***Definición operación to_bystrX

---   ***Definición operación to_uint(32/64/128/256)-> convierte el hash a un uint, el hash debe ser menor que 4/8/16/32 respectivamente.
---   ops to-uint32 to-uint64 to-uint128 to-uint256 : -> TipoHash [ctor] .
---   op __ : TipoHash String -> DeclaracionOp [ctor] .
---   ***Definición operación schnorr_verify.
---   op schnorr-verify___ : String String String -> DeclaracionOp [ctor] .
---   ***Definición operación ecdsa_verify.
---   op ecdsa-verify___ : String String String -> DeclaracionOp [ctor] .
---   ***Definición operación ecdsa_recover_pk.
---   op ecdsa-recover-pk___ : String String String -> DeclaracionOp [ctor] .
---   ***Definición operación concat -> concatena los dos hashes ByStrx ByStrY resultado ByStr(X+Y).
---   ***op concat__ : String String -> DeclaracionOp [ctor] .  Ya está definido para los strings
---   ***Definición operación strlen.
---   op strlen_ : String -> DeclaracionOp [ctor] .
---   ***Definición operación bech32_to_bystr20.
---   op bech32-to-bystr20__ : String String -> DeclaracionOp [ctor] .
---   ***Definición operación bystr20_to_bech32
---   op bystr20-to-bech32__ : String String -> DeclaracionOp [ctor] .
---   ***Definición operación alt_bn128_G1_add
---   op alt-bn128-G1-add__ : String String -> DeclaracionOp [ctor] .
---   ***Definición operación alt_bn128_G1_mul
---   op alt-bn128-G1-mul__ : String String -> DeclaracionOp [ctor] .
---   ***Definición operación alt_bn128_pairing_product
---   op alt-bn128-pairing-product_ : String -> DeclaracionOp [ctor] .

---   ***Definición maps
---   op Emp__ : TipoClave TipoValor -> MapVacio [ctor] .
---   op Map__ : TipoClave TipoValor -> Map [ctor] .
---   ***Definición operación insertar.
---   ***Funcional
  op put___ : Qid Qid Qid -> DeclaracionOp [ctor] .
---   ***In-place.
  op insertar___ : Qid Qid Qid -> DeclaracionOpMapI [ctor] .
  ***Definición operación obtener valor.
  ***Funcional
  op get__ : Qid Qid -> DeclaracionOp [ctor] .
---   ***In-place
  op obtener___ : Qid Qid Qid -> DeclaracionOpMapI [ctor] .
  ***Definición operación contener.
  ***Funcional
  op contains__ : Qid Qid -> DeclaracionOp [ctor] .
---   ***In-place
---   op _<-exists_[_] : String String String -> DeclaracionOpMapI [ctor] .
---   ***Definición operación eliminar.
  ***Funcional
  op remove__ : Qid Qid -> DeclaracionOp [ctor] .
  ***In-place
  op delete__ : Qid Qid -> DeclaracionOpMapI [ctor] .
---   ***Definición operación convertir a lista.
---   ***Funcional
---   op to-list_ : String -> DeclaracionOp [ctor] .
---   ***Definición operación obtener tamaño.
---   ***Funcional
---   op size_ : String -> DeclaracionOp [ctor] .

---   ***Definición direcciones
---   op 0x_ : Bytes -> ByStr20 [ctor] .
---   ***Solo tiene una operación, la de eq y usaremos la misma que la que está definida para los enteros.

---   ***Definición número de bloques
  ***op BNum_ : Int -> BNum [ctor] .
---   ***Definción de operaciones
---   ***La operación eq ya está definida para los enteros.
---   ***Definición operación blt(menor o igual).
---   op blt__ : String String -> DeclaracionOp [ctor] .
---   ***Declaración operación badd (suma un Bnum con un UintX).
---   op badd__ : String String -> DeclaracionOp [ctor] .
---   ***Declaración operación bsub(resta de dos Bnums).
---   op bsub__ : String String -> DeclaracionOp [ctor] .
endfm

fmod datos_algebraicos is 
  pr datos_primitivos .
---   pr NAT .
  sort NombreTipo Option Lista Par Natural .

---   sort Booleano ConstOp TipoList DeclaracionAlg .
---   --- subsort Bool TipoInteger < TipoList .
---   ***subsort Nat < TipoList .
  ***subsort TipoEntero Map < NombreTipo .
   
  ***Declaración booleano -> ya está predefinido en maude.

  ***Declaración option
---   ops String ByStr32 ByStr20 BNum Bool : -> NombreTipo [ctor] .
---   op Option_ : NombreTipo -> Option [ctor] .
---   ***Constructoras option
---   op None{_} : NombreTipo -> Option [ctor] .
---   op None : -> Option [ctor] .
  op Some__ : NombreTipo Qid -> Option [ctor] . 
  op Some_ : Qid -> Option [ctor] .


---   ***Declaración Lista
---   op List_ : NombreTipo -> Lista [ctor] .
---   ***Constructoras de las listas
---   op Nil{_} : NombreTipo -> Lista [ctor] .
  op Cons___ : NombreTipo Qid Qid -> Lista [ctor] .

---   ***Declaración Pares
---   op Pair__ : NombreTipo NombreTipo -> Par [ctor] .
---   ***Constructora Pair
  op Pair____ : NombreTipo NombreTipo Qid Qid -> Par [ctor] .

---   ***Declaración Nat
---   op Nat : -> Natural [ctor] .
---   ***Constructoras de Nat
---   op Zero : -> Natural [ctor] . 
  op Sucesor_ : Qid -> Natural [ctor] .
---   ***op Succ_ : Nat -> Natural [ctor] .

endfm

fmod param_inmutables is

  pr datos_algebraicos .
  ***pr expresiones .
  ***pr STRING .

  sort TipoParamInm ParamInm ParamInmSolo ListaParamInm ParametrosInm Restriccion OperacionBooleana .
  ***subsort TipoEntero Map Option Lista Par Natural < TipoParamInm .
  ***subsort ParamInm < ListaParamInm .
  ***subsort ExpresionBuilt < OperacionBooleana .
  
  --- ops ByStr20 BNum String ByStr32 Bool : -> TipoParamInm [ctor] .
  --- ***op _:_ : String TipoParamInm -> ParamInmSolo [ctor] .
  op _:_ : Qid TipoParamInm -> ParamInm [ctor] .
  op ListaParamInm__ : ListaParamInm ListaParamInm -> ListaParamInm [ctor] .
  --- ***op vacio : -> ListaParamInm [ctor] .
  --- ***op _ : ParamInm -> ListaParamInm [ctor] .
  --- op _,_ : ListaParamInm ListaParamInm -> ListaParamInm [ctor assoc comm] . 
  --- ***op <> : -> ParametrosInm [ctor] .
  --- op <_> : ListaParamInm -> ParametrosInm [ctor] .
  --- ***op [_with_=>] : ParametrosInm OperacionBooleana -> Restriccion [ctor] .

endfm

fmod campos_modificables is
  pr param_inmutables .

  sort ListaCamposMod ValorCampo Campo_mod .
  --- subsort Campo_mod < ListaCamposMod .

  op campo__ : ParamInm ValorCampo -> Campo_mod [ctor] .
  op ListaCamposMod__ : ListaCamposMod ListaCamposMod -> ListaCamposMod [ctor] .

endfm

fmod expresiones is
  ***pr QID .
  pr param_inmutables .
  --- pr BoolUtils .
  --- pr IntUtils .
  --- sort TipoDato Expresion Operacion ListaEntradas EventoMsg Opcion ListaOpciones Argumento ListaArgumentos 
  ---      ExpresionBuilt Expresiones ExpresionFuncion Expresion@ OperacionBuilt TipoOpcion ExpresionMatch .
  --- subsorts Entero String Bool ExpresionBuilt Map ByStr32 ByStr20 BNum Option Lista Par Natural Expresion < TipoDato .
  --- subsorts ExpresionFuncion ExpresionBuilt EventoMsg Expresion@ ExpresionMatch < Expresion .
  --- subsort ParamInm < ListaEntradas .
  --- subsort Opcion < ListaOpciones .
  --- subsort Expresion DeclaracionOpBools DeclaracionOpInts < Operacion .
  --- subsort Argumento < ListaArgumentos .
  --- subsort DeclaracionOp < OperacionBuilt .
  --- subsorts Option Bool Par < TipoOpcion .
  --- ***subsort Expresion ExpresionBuilt < Expresiones .
  --- ***Entrada: nombre de la variable y el valor

  sort Expresion TipoDato Operacion ListaArgumentos ExpresionFuncion OperacionBuilt ListaOpciones NombreEvento ListaCamposEvento Evento
       TipoOpcion Expresiones Opcion .
  ***subsorts Entero String BNum < TipoDato .

  op let__ : Qid TipoDato -> Expresion [ctor]  .

  op let__in_ : Qid TipoDato Operacion -> Expresion [ctor] .

  --- ***Declaracion expresion de evento o mensaje
  --- ***op _:_ : String String -> Entrada [ctor] .
  --- op _:_ : String String -> ParamInm [ctor] .
  --- op _;_ : ListaEntradas ListaEntradas -> ListaEntradas [ctor assoc] .
  --- op {_} : ListaEntradas -> EventoMsg [ctor] .

  --- ***Declaracion de funcion
  --- op fun(_) =>_ : ParamInm Operacion -> ExpresionFuncion [ctor] .

  op funcion__ : ParamInm Operacion -> ExpresionFuncion [ctor] .
  op aplicarFuncion___ : Qid Qid ListaArgumentos -> Expresion [ctor] .

  --- op tfun'_=>_ : String Operacion -> Expresion [ctor] .

  op @__ : Qid Qid -> Expresion [ctor] .  ***No es exactamente string (hay que cambiarlo).
  ***subsort TipoEntero < ListaArgumentos .
  ***op lista__ : ListaArgumentos ListaArgumentos -> ListaArgumentos [ctor prec 17] .

  --- op [_] : String -> Argumento [ctor] .
  --- op __ : ListaArgumentos ListaArgumentos -> ListaArgumentos [ctor] .
  --- ***op builtin__ : OperacionBuilt ListaArgumentos -> ExpresionBuilt [ctor] . ***No es exactamente string (hay que cambiarlo).
  op builtin_ : OperacionBuilt -> Expresion [ctor] .

  --- op |_=>_ : TipoOpcion String -> Opcion [ctor] .  ***La segunda entrada no sería un string sino un statement.
  --- op __ : ListaOpciones ListaOpciones -> ListaOpciones [ctor] .
  op opcionMatch__ : TipoOpcion Expresiones -> Opcion [ctor] .
  op match__ : Qid ListaOpciones -> Expresion [ctor] .

endfm

fmod declaraciones is
  pr expresiones .

  --- sort Declaracion Valor ListaDeclaraciones DeclaracionFuncion .
  --- subsorts Entero String DeclaracionFuncion EventoMsg ExpresionBuilt Option Lista Par Natural DeclaracionOpBools DeclaracionOpInts < Valor .
  --- subsorts Declaracion ExpresionMatch < ListaDeclaraciones .
  --- subsort DeclaracionFuncion < Declaracion .
  sort Declaracion Valor ListaDeclaraciones .
  
  op guardar__ : Qid Qid -> Declaracion [ctor] .
  op actualizar__ : Qid Qid -> Declaracion [ctor] .
  op _<-&BLOCKNUMBER : Qid -> Declaracion [ctor] .
  op _=_ : Qid Valor -> Declaracion [ctor] .
  op __ : Qid ListaArgumentos -> Declaracion [ctor] .
  op forall__ : Qid Qid -> Declaracion [ctor] .
  op enviar_ : Qid -> Declaracion [ctor] .
  op evento_ : Qid -> Declaracion [ctor] .

  op ListaDec__ : ListaDeclaraciones ListaDeclaraciones -> ListaDeclaraciones [ctor assoc] .

endfm

fmod comunicaciones is
  pr QID . 
  
  sort NombreEvento ListaCamposEvento Evento TagMensaje EnvioMensaje CantidadMensaje Mensaje .

  op contenidoEvento__ : NombreEvento ListaCamposEvento -> Evento [ctor] .
  op dirEnvio_ : Qid -> EnvioMensaje [ctor] .
  op contenidoMensaje____ : TagMensaje EnvioMensaje CantidadMensaje ListaCamposEvento -> Mensaje [ctor] .

endfm

fmod transiciones is
  pr param_inmutables .
  pr declaraciones .

  sort Transicion .
  
  op transicion___ : Qid ListaParamInm ListaDeclaraciones -> Transicion [ctor] .

endfm


fmod ADT is
  ***pr datos_primitivos .
  pr QID .

  sort Constructora Constructoras ADTS Nombre ListaArgumentos .
  --- subsort Constructora < Constructoras .
  --- subsort String < Nombre .
  --- subsort Nombre < ListaArgumentos .

  op |_ : Qid -> Constructora [ctor] .
  ops String ByStr32 ByStr20 BNum Bool : -> ListaArgumentos [ctor] .
  op __ : ListaArgumentos ListaArgumentos -> ListaArgumentos [ctor assoc] .
  op |_of_ : Qid ListaArgumentos -> Constructora [ctor] . 
  op __ : Constructoras Constructoras -> Constructoras [ctor assoc] .
  op type_=_ : Nombre Constructoras -> ADTS [ctor] .

endfm

fmod BoolUtils is 
  pr QID .
  sort DeclaracionOpBools .
 

  ops _and_ _or_ : Qid Qid -> DeclaracionOpBools [ctor] .
  ops negb_ bool-to-string_ : Qid -> DeclaracionOpBools [ctor] .
  --- op pasarString : Bool -> String .
  --- eq pasarString(true) = "True" .
  --- eq pasarString(false) = "False" .
endfm

fmod contrato is
  pr QID .

  sort Contrato Version Campo_mod ListaParamInm NombreLibreria NombreContrato NombreEvento ListaTransiciones Libreria Importacion .

  op NombreLibreria_ : Qid -> NombreLibreria [ctor] .
  op NombreContrato_ : Qid -> NombreContrato [ctor] .
  
  op Contrato_______ : Version Importacion Libreria NombreContrato ListaParamInm Campo_mod ListaTransiciones -> Contrato [ctor] .
  ***op Contrato__ : Version NombreEvento -> Contrato [ctor] .

endfm 

fmod META-SIGN is
 including GRAMMAR .
 pr META-LEVEL .

 op BUBBLES : -> FModule .
 op GRAMMAR : -> FModule [memo] .

 eq BUBBLES
    = (fmod 'GRAMMAR is
        including 'QID-LIST .
        sorts none .
        none
        op 'token : 'Qid -> '@Token@
             [special(
               (id-hook('Bubble, '1 '1)
                op-hook('qidSymbol, '<Qids>, nil, 'Qid)))] .
        op 'bubble : 'QidList -> '@Bubble@
             [special(
               (id-hook('Bubble, '1 '-1)
                op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList)
                op-hook('qidSymbol, '<Qids>, nil, 'Qid)
                id-hook('Exclude, 'eq 'ceq 'rl 'crl 'mb 'cmb 'sd 'csd
                                  'var 'vars 'forall 'exists
                                  'sorts 'subsort 'subsorts 'op 'ops
                                  'protecting 'pr 'including 'inc 'extending 
                                  'ctor 'assoc 'comm '== '/\ 'spec* 'spec! 'builtin '`{ 'let 'Pair '`( '`) 'Some
                                  '; 'andb 'true 'BoolU 'Uint32 'Uint128 'Uint256 'Nil 'throw 'Emp 'field 'false
                                  'ev '= '| 'Unit 'orb ':= 'None 'Some 'fun 'Int32 'Int128 'match 'String 'ByStr32 'ByStr33 'ByStr20 
                                  'BNum 'Bool 'Message 'Error 'ByStr 'ByStr64 'Unit )))] .
        op 'neTokenList : 'QidList -> '@NeTokenList@
             [special(
               (id-hook('Bubble, '1 '-1 '`( '`))
                op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList)
                op-hook('qidSymbol, '<Qids>, nil, 'Qid)
                id-hook('Exclude, '. ': '`[ 'forall 'exists)))] .
        none
        none
     endfm) .
 eq GRAMMAR = addImports(BUBBLES, (including 'GRAMMAR .)) .

 var  SSDS : SubsortDeclSet .
 vars IL IL' : ImportList .
 var  EqS : EquationSet .
 var  ODS : OpDeclSet .
 var  MAS : MembAxSet .
 var  RS : RuleSet .
 var  M : Module .
 var  SS : SortSet .
 var  H : Header .

 op setImports : Module ImportList -> Module .
 eq setImports(fmod H is IL sorts SS . SSDS ODS MAS EqS endfm, IL')
    = fmod H is IL' sorts SS . SSDS ODS MAS EqS endfm .
 eq setImports(mod H is IL sorts SS . SSDS ODS MAS EqS RS endm, IL')
    = mod H is IL' sorts SS . SSDS ODS MAS EqS RS endm .
 eq setImports(fth H is IL sorts SS . SSDS ODS MAS EqS endfth, IL')
    = fth H is IL' sorts SS . SSDS ODS MAS EqS endfth .
 eq setImports(th H is IL sorts SS . SSDS ODS MAS EqS RS endth, IL')
    = th H is IL' sorts SS . SSDS ODS MAS EqS RS endth .

 op addImports : Module ImportList -> Module .
 eq addImports(M, IL) = setImports(M, (getImports(M) IL)) .
endfm